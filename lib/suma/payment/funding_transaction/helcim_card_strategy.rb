# frozen_string_literal: true

require "suma/helcim"
require "suma/payment/funding_transaction/strategy"
require "suma/postgres/model"

class Suma::Payment::FundingTransaction::HelcimCardStrategy <
  Suma::Postgres::Model(:payment_funding_transaction_helcim_card_strategies)
  include Suma::Payment::FundingTransaction::Strategy

  one_to_one :funding_transaction, class: "Suma::Payment::FundingTransaction"
  many_to_one :originating_card, class: "Suma::Payment::Card"

  def originating_instrument
    return self.originating_card
  end

  def short_name
    return "Helcim Card Funding"
  end

  def check_validity
    card = self.originating_card
    result = []
    (result << "is soft deleted and cannot be used for funding") if card.soft_deleted?
    (result << "requires the originating ip to be set") if self.funding_transaction.originating_ip.blank?
    return result
  end

  def ready_to_collect_funds?
    return true
  end

  def transaction_id
    preauth_xid = self.preauth_transaction_id
    capture_xid = self.capture_transaction_id
    raise Suma::InvalidPostcondition, "preauth and capture ids differ" if
      preauth_xid && capture_xid && preauth_xid != capture_xid
    return capture_xid || preauth_xid
  end

  def preauth_transaction_id = self.preauth_json&.fetch("transactionId", nil)
  def capture_transaction_id = self.capture_json&.fetch("transactionId", nil)

  def collect_funds
    return false if self.transaction_id.present?
    self.preauth_json = Suma::Helcim.preauthorize(
      amount: self.funding_transaction.amount,
      token: self.originating_card.helcim_token,
      ip: self.funding_transaction.originating_ip,
    )
    if self.preauth_transaction_id.blank?
      msg = "Helcim preauth transaction id not set after API call from #{self.class.name}[#{self.id}]. " \
            "JSON: #{self.preauth_json}"
      raise Suma::InvalidPostcondition, msg
    end
    return true
  end

  def funds_cleared?
    return true if self.capture_transaction_id
    raise Suma::InvalidPrecondition, "Helcim preauth transaction id not set" unless self.preauth_transaction_id
    self.capture_json = Suma::Helcim.capture(transaction_id: self.preauth_transaction_id)
    if self.capture_transaction_id.blank?
      msg = "Helcim capture transaction id not set after API call from #{self.class.name}[#{self.id}]. " \
            "JSON: #{self.preauth_json}"
      raise Suma::InvalidPostcondition, msg
    end
    return true
  end

  # def _external_links_self
  #   return [] unless self.ach_transfer_id
  #   return [
  #     self._external_link(
  #       "ACH Transfer into Increase Account",
  #       "#{Suma::Increase.app_url}#{self.ach_transfer_json['path']}",
  #     ),
  #     self._external_link(
  #       "Transaction for ACH Transfer",
  #       "#{Suma::Increase.app_url}/transactions/#{self.ach_transfer_json['transaction_id']}",
  #     ),
  #   ]
  # end
  #
  def _external_link_deps
    return [self.originating_card]
  end
end

# Table: payment_funding_transaction_increase_ach_strategies
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Columns:
#  id                          | integer                  | PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
#  created_at                  | timestamp with time zone | NOT NULL DEFAULT now()
#  updated_at                  | timestamp with time zone |
#  originating_bank_account_id | integer                  | NOT NULL
#  ach_transfer_json           | jsonb                    | NOT NULL DEFAULT '{}'::jsonb
#  transaction_json            | jsonb                    | NOT NULL DEFAULT '{}'::jsonb
# Indexes:
#  payment_funding_transaction_increase_ach_strategies_pkey | PRIMARY KEY btree (id)
# Foreign key constraints:
#  payment_funding_transaction_in_originating_bank_account_id_fkey | (originating_bank_account_id) REFERENCES bank_accounts(id)
# Referenced By:
#  payment_funding_transactions | payment_funding_transactions_increase_ach_strategy_id_fkey | (increase_ach_strategy_id) REFERENCES payment_funding_transaction_increase_ach_strategies(id)
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
