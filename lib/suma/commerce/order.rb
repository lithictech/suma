# frozen_string_literal: true

require "suma/commerce"
require "suma/postgres/model"

class Suma::Commerce::Order < Suma::Postgres::Model(:commerce_orders)
  plugin :state_machine
  plugin :timestamps

  one_to_many :audit_logs, class: "Suma::Commerce::OrderAuditLog", order: Sequel.desc(:at)
  many_to_one :checkout, class: "Suma::Commerce::Checkout"
  one_to_many :charges, class: "Suma::Charge", key: :commerce_order_id

  state_machine :order_status, initial: :open do
    state :open

    after_transition(&:commit_audit_log)
    after_failure(&:commit_audit_log)
  end

  state_machine :fulfillment_status, initial: :unfulfilled do
    state :unfulfilled

    after_transition(&:commit_audit_log)
    after_failure(&:commit_audit_log)
  end

  def serial = "%04d" % self.id

  # How much was paid for this order is the sum of all book transactions linked to charges.
  # Note that this includes subsidy AND synchronous charges during checkout.
  def paid_amount
    return self.charges.sum(Money.new(0), &:discounted_subtotal)
  end

  # How much of the paid amount was synchronously funded during checkout?
  # Note that there is no book transaction associated from the charge (which are all debits)
  # to the funding transaction (which is a credit)- payments work with ledgers, not linking
  # charges to orders, so we keep track of this additional data via associated_funding_transaction.
  def funded_amount
    return self.charges.map(&:associated_funding_transactions).flatten.sum(Money.new(0), &:amount)
  end
end

# Table: commerce_orders
# ----------------------------------------------------------------------------------------------------------------
# Columns:
#  id                 | integer                  | PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
#  created_at         | timestamp with time zone | NOT NULL DEFAULT now()
#  updated_at         | timestamp with time zone |
#  order_status       | text                     | NOT NULL
#  fulfillment_status | text                     | NOT NULL
#  checkout_id        | integer                  | NOT NULL
# Indexes:
#  commerce_orders_pkey            | PRIMARY KEY btree (id)
#  commerce_orders_checkout_id_key | UNIQUE btree (checkout_id)
# Foreign key constraints:
#  commerce_orders_checkout_id_fkey | (checkout_id) REFERENCES commerce_checkouts(id)
# Referenced By:
#  commerce_order_audit_logs | commerce_order_audit_logs_order_id_fkey | (order_id) REFERENCES commerce_orders(id)
# ----------------------------------------------------------------------------------------------------------------
