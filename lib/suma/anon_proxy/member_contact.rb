# frozen_string_literal: true

require "suma/admin_linked"
require "suma/external_links"
require "suma/postgres"
require "suma/anon_proxy"
require "suma/async/anon_proxy_destroyed_member_contact_cleanup"

class Suma::AnonProxy::MemberContact < Suma::Postgres::Model(:anon_proxy_member_contacts)
  include Suma::AdminLinked
  include Suma::ExternalLinks
  include Suma::Postgres::HybridSearch

  plugin :hybrid_search
  plugin :timestamps

  many_to_one :member, class: "Suma::Member"
  one_to_many :vendor_accounts, class: "Suma::AnonProxy::VendorAccount", key: :contact_id, order: order_desc

  class << self
    # Helper to provision an anonymous email or phone member contact for the member.
    # @param member [Suma::Member]
    # @param type [:phone, :email]
    def ensure_anonymous_contact(member, type)
      contact = member.anon_proxy_contacts.find(&:"#{type}?")
      return [contact, false] if contact
      contact = self.provision_anonymous_contact(member, type)
      return [contact, true]
    end

    def provision_anonymous_contact(member, type)
      relay = Suma::AnonProxy::Relay.send(:"active_#{type}_relay")
      addr = relay.provision(member)
      contact = Suma::AnonProxy::MemberContact.create(
        member:,
        relay_key: relay.key,
        type => addr.address,
        external_relay_id: addr.external_id || "",
      )
      return contact
    end
  end

  def phone? = !!self.phone
  def email? = !!self.email
  def address = self.email || self.phone
  def formatted_address = self.phone? ? Suma::PhoneNumber.format_display(self.phone) : self.email

  def rel_admin_link = "/anon-member-contact/#{self.id}"

  def hybrid_search_fields
    return [:member, :phone, :email]
  end

  def _external_links_self
    Suma::AnonProxy::Relay.create!(self.relay_key).external_links(self)
  end

  def after_destroy
    super
    Suma::Async::AnonProxyMemberContactDestroyedResourceCleanup.
      perform_async({address: self.address, external_id: self.external_relay_id, relay_key: self.relay_key})
  end
end

# Table: anon_proxy_member_contacts
# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Columns:
#  id                | integer                  | PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
#  created_at        | timestamp with time zone | NOT NULL DEFAULT now()
#  updated_at        | timestamp with time zone |
#  phone             | text                     |
#  email             | text                     |
#  relay_key         | text                     | NOT NULL
#  member_id         | integer                  | NOT NULL
#  search_content    | text                     |
#  search_embedding  | vector(384)              |
#  search_hash       | text                     |
#  external_relay_id | text                     | NOT NULL DEFAULT ''::text
# Indexes:
#  anon_proxy_member_contacts_pkey                          | PRIMARY KEY btree (id)
#  anon_proxy_member_contacts_email_relay_key_key           | UNIQUE btree (email, relay_key)
#  anon_proxy_member_contacts_phone_relay_key_key           | UNIQUE btree (phone, relay_key)
#  anon_proxy_member_contacts_member_id_index               | btree (member_id)
#  anon_proxy_member_contacts_search_content_tsvector_index | gin (to_tsvector('english'::regconfig, search_content))
# Check constraints:
#  unambiguous_address | (phone IS NOT NULL AND email IS NULL OR phone IS NULL AND email IS NOT NULL)
# Foreign key constraints:
#  anon_proxy_member_contacts_member_id_fkey | (member_id) REFERENCES members(id) ON DELETE CASCADE
# Referenced By:
#  anon_proxy_vendor_accounts | anon_proxy_vendor_accounts_contact_id_fkey | (contact_id) REFERENCES anon_proxy_member_contacts(id) ON DELETE SET NULL
# ----------------------------------------------------------------------------------------------------------------------------------------------------
