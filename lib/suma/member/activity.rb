# frozen_string_literal: true

require "suma/postgres"
require "suma/member"

class Suma::Member::Activity < Suma::Postgres::Model(:member_activities)
  plugin :timestamps

  many_to_one :member, class: Suma::Member

  def summary_md
    s = self.summary.dup
    # Replace all Suma::Xyz[0] with code blocks, using the admin link if supported.
    s.gsub!(/(Suma::[A-Za-z:]+\[\d+\])/) do |m|
      clsname, id = m.split("[")
      id.delete_suffix!("]")
      cls = Kernel.const_get(clsname)
      model = cls.new
      if model.respond_to?(:admin_link)
        model[cls.primary_key] = id.to_i
        m = m.delete_prefix("Suma::")
        "[<code class=\"code\">#{m}</code>](#{model.rooted_admin_link})"
      else
        "<code class=\"code\">#{m}</code>"
      end
    end
    # Replace single-quoted name strings with a colored span.
    s.gsub!(/('[\w\s_-]+')/) do |m|
      "<span class=\"quote\">#{m}</span>"
    end
    # Make email bold
    s.gsub!(/(\w+@[\w.]+)/) do |m|
      "<span class=\"email\">#{m}</span>"
    end
    # Make actions bold
    s.gsub!(self.message_name, "<span class=\"action\">#{self.message_name}</span>")
    return s
  end
end

# Table: member_activities
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Columns:
#  id             | integer                  | PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
#  created_at     | timestamp with time zone | NOT NULL DEFAULT now()
#  updated_at     | timestamp with time zone |
#  message_name   | text                     | NOT NULL
#  message_vars   | jsonb                    | NOT NULL DEFAULT '{}'::jsonb
#  summary        | text                     | NOT NULL
#  subject_type   | text                     | NOT NULL
#  subject_id     | text                     | NOT NULL
#  member_id      | integer                  | NOT NULL
#  subject_id_int | integer                  | DEFAULT
#    CASE
#        WHEN (regexp_match(subject_id, '^\d+$'::text) IS NOT NULL) THEN (subject_id)::integer
#        ELSE NULL::integer
#    END
# Indexes:
#  member_activities_pkey                              | PRIMARY KEY btree (id)
#  member_activities_member_id_index                   | btree (member_id)
#  member_activities_subject_id_int_subject_type_index | btree (subject_id_int, subject_type)
#  member_activities_subject_id_subject_type_index     | btree (subject_id, subject_type)
# Foreign key constraints:
#  member_activities_member_id_fkey | (member_id) REFERENCES members(id) ON DELETE CASCADE
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
