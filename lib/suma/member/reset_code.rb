# frozen_string_literal: true

require "securerandom"

require "suma/postgres"
require "suma/member"

class Suma::Member::ResetCode < Suma::Postgres::Model(:member_reset_codes)
  class Unusable < RuntimeError; end

  plugin :timestamps

  many_to_one :member, class: Suma::Member

  dataset_module do
    def usable
      return self.where(Sequel[used: false] & Sequel.expr { expire_at > Sequel.function(:now) })
    end
  end

  # Invoke the given block with the reset code referred to by token.
  # Raise Unusable if code is unusable.
  def self.use_code_with_token(token)
    raise LocalJumpError unless block_given?

    code = self.usable[token:]
    raise Unusable unless code&.usable?

    code.db.transaction do
      code.use!
      yield(code)
    end
  end

  def initialize(*)
    super
    self.token ||= Array.new(6) { rand(0..9) }.join
    self.expire_at ||= 15.minutes.from_now
  end

  def expire!
    self.update(expire_at: Time.now)
    return self
  end

  def expired?
    return self.expire_at < Time.now
  end

  def use!
    now = Time.now
    self.member.reset_codes_dataset.usable.update(expire_at: now)
    self.update(used: true, expire_at: now)
    return self
  end

  def used?
    return self.used
  end

  def usable?
    return false if self.used?
    return !self.expired?
  end

  #
  # :section: Sequel Validation
  #

  def validate
    super
    self.validates_includes(["sms", "email"], :transport)
  end
end

# Table: member_reset_codes
# -----------------------------------------------------------------------------------------
# Columns:
#  id         | integer                  | PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
#  created_at | timestamp with time zone | NOT NULL DEFAULT now()
#  updated_at | timestamp with time zone |
#  transport  | text                     | NOT NULL
#  token      | text                     | NOT NULL
#  used       | boolean                  | NOT NULL DEFAULT false
#  expire_at  | timestamp with time zone | NOT NULL
#  member_id  | integer                  | NOT NULL
# Indexes:
#  member_reset_codes_pkey            | PRIMARY KEY btree (id)
#  member_reset_codes_member_id_index | btree (member_id)
# Foreign key constraints:
#  member_reset_codes_member_id_fkey | (member_id) REFERENCES members(id) ON DELETE CASCADE
# -----------------------------------------------------------------------------------------
