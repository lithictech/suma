# frozen_string_literal: true

require "suma/postgres"
require "suma/member"

class Suma::Member::Session < Suma::Postgres::Model(:member_sessions)
  plugin :timestamps

  many_to_one :member, class: Suma::Member
  many_to_one :impersonating, class: Suma::Member

  def self.params_for_request(request)
    return {
      peer_ip: request.ip,
      user_agent: request.user_agent || "(unset)",
    }
  end

  dataset_module do
    def valid
      return self.where(logged_out_at: nil)
    end
  end

  def initialize(*)
    super
    self[:token] ||= "ses_#{SecureRandom.uuid}"
  end

  def logged_out? = !!self.logged_out_at

  def mark_logged_out
    self.logged_out_at = Time.now
    return self
  end

  def impersonate(member)
    self.impersonating = member
    return self
  end

  def unimpersonate
    self.impersonating = nil
    return self
  end

  def impersonation? = !self.impersonating_id.nil?

  def public_user = self.impersonation? ? self.impersonating : self.member

  # If this session is impersonating someone, the character is the member being impersonated.
  # If this session is not impersonating, the member is the character.
  # def character = self.impersonation? ? self.impersonating : self.member

  def validate
    super
    self.validates_presence :peer_ip
    self.validates_presence :user_agent
    self.validates_presence :member_id
    self.validates_presence :token
  end
end

# Table: member_sessions
# -----------------------------------------------------------------------------------------------------
# Columns:
#  id               | integer                  | PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
#  created_at       | timestamp with time zone | NOT NULL DEFAULT now()
#  member_id        | integer                  | NOT NULL
#  user_agent       | text                     | NOT NULL
#  peer_ip          | inet                     | NOT NULL
#  token            | text                     | NOT NULL
#  logged_out_at    | timestamp with time zone |
#  impersonating_id | integer                  |
# Indexes:
#  member_sessions_pkey             | PRIMARY KEY btree (id)
#  member_sessions_token_key        | UNIQUE btree (token)
#  member_sessions_member_id_index  | btree (member_id)
#  member_sessions_peer_ip_index    | btree (peer_ip)
#  member_sessions_user_agent_index | btree (user_agent)
# Foreign key constraints:
#  member_sessions_impersonating_id_fkey | (impersonating_id) REFERENCES members(id) ON DELETE SET NULL
#  member_sessions_member_id_fkey        | (member_id) REFERENCES members(id) ON DELETE CASCADE
# -----------------------------------------------------------------------------------------------------
