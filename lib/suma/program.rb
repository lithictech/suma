# frozen_string_literal: true

require "suma/admin_linked"
require "suma/has_activity_audit"
require "suma/image"
require "suma/postgres/model"

class Suma::Program < Suma::Postgres::Model(:programs)
  include Suma::Postgres::HybridSearch
  include Suma::AdminLinked
  include Suma::HasActivityAudit
  include Suma::Image::SingleAssociatedMixin

  # True if +Suma::Program::Has+ types should be available to everyone when they have no programs (value of +true+),
  # or available to no one until they are associated with a program (value of +false+).
  #
  # This value is +true+ when running tests, because otherwise we need to create a program to link
  # every fixtured object to a member being tested.
  #
  # Since programs are designed to be orthogonal to the components they're providing access to,
  # this makes tests and concepts messy. But it's a safer default outside of tests.
  UNPROGRAMMED_ACCESSIBLE = Suma.test?

  plugin :hybrid_search
  plugin :timestamps
  plugin :tstzrange_fields, :period
  plugin :translated_text, :name, Suma::TranslatedText
  plugin :translated_text, :description, Suma::TranslatedText
  plugin :translated_text, :app_link_text, Suma::TranslatedText
  plugin :association_pks

  one_to_many :enrollments, class: "Suma::Program::Enrollment", order: order_desc
  one_to_many :pricings, class: "Suma::Program::Pricing", order: order_desc
  one_to_many :enrollment_exclusions, class: "Suma::Program::EnrollmentExclusion", order: order_desc

  many_to_many :commerce_offerings,
               class: "Suma::Commerce::Offering",
               join_table: :programs_commerce_offerings,
               right_key: :offering_id,
               order: order_desc
  many_to_many :anon_proxy_vendor_configurations,
               class: "Suma::AnonProxy::VendorConfiguration",
               join_table: :programs_anon_proxy_vendor_configurations,
               right_key: :configuration_id,
               order: order_desc
  many_to_many :payment_triggers,
               class: "Suma::Payment::Trigger",
               join_table: :programs_payment_triggers,
               right_key: :trigger_id,
               order: order_desc

  plugin :association_array_replacer, :commerce_offerings, :anon_proxy_vendor_configurations, :payment_triggers

  dataset_module do
    def active(as_of:)
      return self.where { (lower(period) < as_of) & (upper(period) > as_of) }
    end
  end

  class << self
    HIDE_ENDING_AFTER = 3.years

    # Return +v+ if it is soon enough to matter, +nil+ if not (see +HIDE_ENDING_AFTER+).
    # We do not need to display closing information for things that end so far in the future.
    def period_end_or_nil(v)
      return nil if v >= Time.now + HIDE_ENDING_AFTER
      return v
    end
  end

  def enrollment_for(o, as_of:, include: :active)
    # Use datasets for these checks, since otherwise we'd need to load a bunch of organization memberships,
    # which could be very memory-intensive.
    ds = case o
      when Suma::Member
        self.enrollments_dataset.
          where(
            Sequel[member: o] |
            Sequel[organization_id: o.organization_memberships_dataset.verified.select(:verified_organization_id)] |
            Sequel[role_id: o.roles_dataset.select(:id)],
          )
      when Suma::Organization
        self.enrollments_dataset.where(organization: o)
      when Suma::Role
        self.enrollments_dataset.where(role: o)
     else
        raise TypeError, "unhandled type: #{o.class}"
    end
    ds = ds.active(as_of:) unless include == :all
    return ds.first
  end

  # Return +period_end+ if it is soon enough to matter, +nil+ if not.
  # We do not need to display closing information for offerings that end so far in the future.
  def period_end_visible = Suma::Program.period_end_or_nil(self.period_end)

  def rel_admin_link = "/program/#{self.id}"

  def hybrid_search_fields
    return [
      :name,
      :description,
      :period_begin,
      :period_end,
    ]
  end

  # @!attribute lyft_pass_program_id
  # The program ID from Lyft. It is used for enrollment in the program.
  # This is the '1234' in the URL at a URL like
  # https://business.lyft.com/organization/myspecialorg/lyft-pass/programs/1234/overview.
  # @return [String]
end

require "suma/program/enrollment_remover"
require "suma/program/has"

# Table: programs
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------
# Columns:
#  id                     | integer                  | PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
#  created_at             | timestamp with time zone | NOT NULL DEFAULT now()
#  updated_at             | timestamp with time zone |
#  name_id                | integer                  | NOT NULL
#  description_id         | integer                  | NOT NULL
#  period                 | tstzrange                | NOT NULL
#  ordinal                | double precision         | NOT NULL DEFAULT 0
#  app_link               | text                     | NOT NULL DEFAULT ''::text
#  app_link_text_id       | integer                  | NOT NULL
#  lyft_pass_program_id   | text                     | NOT NULL DEFAULT ''::text
#  search_content         | text                     |
#  search_embedding       | vector(384)              |
#  search_hash            | text                     |
#  vendor_service_id      | integer                  |
#  vendor_service_rate_id | integer                  |
# Indexes:
#  programs_pkey                          | PRIMARY KEY btree (id)
#  programs_search_content_tsvector_index | gin (to_tsvector('english'::regconfig, search_content))
# Foreign key constraints:
#  programs_app_link_text_id_fkey       | (app_link_text_id) REFERENCES translated_texts(id)
#  programs_description_id_fkey         | (description_id) REFERENCES translated_texts(id)
#  programs_name_id_fkey                | (name_id) REFERENCES translated_texts(id)
#  programs_vendor_service_id_fkey      | (vendor_service_id) REFERENCES vendor_services(id)
#  programs_vendor_service_rate_id_fkey | (vendor_service_rate_id) REFERENCES vendor_service_rates(id)
# Referenced By:
#  images                                    | images_program_id_fkey                                    | (program_id) REFERENCES programs(id)
#  program_enrollments                       | program_enrollments_program_id_fkey                       | (program_id) REFERENCES programs(id) ON DELETE CASCADE
#  programs_anon_proxy_vendor_configurations | programs_anon_proxy_vendor_configurations_program_id_fkey | (program_id) REFERENCES programs(id)
#  programs_commerce_offerings               | programs_commerce_offerings_program_id_fkey               | (program_id) REFERENCES programs(id)
#  programs_payment_triggers                 | programs_payment_triggers_program_id_fkey                 | (program_id) REFERENCES programs(id)
#  programs_vendor_services                  | programs_vendor_services_program_id_fkey                  | (program_id) REFERENCES programs(id)
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------
