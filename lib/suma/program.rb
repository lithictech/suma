# frozen_string_literal: true

require "suma/admin_linked"
require "suma/image"
require "suma/postgres/model"

class Suma::Program < Suma::Postgres::Model(:programs)
  include Suma::Postgres::HybridSearch
  include Suma::AdminLinked
  include Suma::Image::SingleAssociatedMixin

  plugin :hybrid_search
  plugin :timestamps
  plugin :tstzrange_fields, :period
  plugin :translated_text, :name, Suma::TranslatedText
  plugin :translated_text, :description, Suma::TranslatedText
  plugin :translated_text, :app_link_text, Suma::TranslatedText
  plugin :association_pks

  one_to_many :enrollments,
              class: "Suma::Program::Enrollment"

  many_to_many :vendor_services,
               class: "Suma::Vendor::Service",
               join_table: :programs_vendor_services,
               right_key: :service_id
  many_to_many :commerce_offerings,
               class: "Suma::Commerce::Offering",
               join_table: :programs_commerce_offerings,
               right_key: :offering_id
  many_to_many :anon_proxy_vendor_configurations,
               class: "Suma::AnonProxy::VendorConfiguration",
               join_table: :programs_anon_proxy_vendor_configurations,
               right_key: :configuration_id
  many_to_many :payment_triggers,
               class: "Suma::Payment::Trigger",
               join_table: :programs_payment_triggers,
               right_key: :trigger_id

  plugin :association_array_replacer, :vendor_services, :commerce_offerings

  dataset_module do
    def active(as_of:)
      return self.where { (lower(period) < as_of) & (upper(period) > as_of) }
    end
  end

  def enrollment_for(o, as_of:, include: :active)
    # Use datasets for these checks, since otherwise we'd need to load a bunch of organization memberships,
    # which could be very memory-intensive.
    ds = case o
      when Suma::Member
        self.enrollments_dataset.
          where(
            Sequel[member: o] |
            Sequel[organization_id: o.organization_memberships_dataset.verified.select(:verified_organization_id)] |
            Sequel[role_id: o.roles_dataset.select(:id)],
          )
      when Suma::Organization
        self.enrollments_dataset.where(organization: o)
      when Suma::Role
        self.enrollments_dataset.where(role: o)
     else
        raise TypeError, "unhandled type: #{o.class}"
    end
    ds = ds.active(as_of:) unless include == :all
    return ds.first
  end

  def rel_admin_link = "/program/#{self.id}"

  def hybrid_search_fields
    return [
      :name,
      :description,
      :period_begin,
      :period_end,
    ]
  end
end

require "suma/program/has"

# Table: programs
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------
# Columns:
#  id               | integer                  | PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
#  created_at       | timestamp with time zone | NOT NULL DEFAULT now()
#  updated_at       | timestamp with time zone |
#  name_id          | integer                  | NOT NULL
#  description_id   | integer                  | NOT NULL
#  period           | tstzrange                | NOT NULL
#  ordinal          | double precision         | NOT NULL DEFAULT 0
#  app_link         | text                     | NOT NULL DEFAULT ''::text
#  app_link_text_id | integer                  | NOT NULL
# Indexes:
#  programs_pkey | PRIMARY KEY btree (id)
# Foreign key constraints:
#  programs_app_link_text_id_fkey | (app_link_text_id) REFERENCES translated_texts(id)
#  programs_description_id_fkey   | (description_id) REFERENCES translated_texts(id)
#  programs_name_id_fkey          | (name_id) REFERENCES translated_texts(id)
# Referenced By:
#  images                                    | images_program_id_fkey                                    | (program_id) REFERENCES programs(id)
#  program_enrollments                       | program_enrollments_program_id_fkey                       | (program_id) REFERENCES programs(id) ON DELETE CASCADE
#  programs_anon_proxy_vendor_configurations | programs_anon_proxy_vendor_configurations_program_id_fkey | (program_id) REFERENCES programs(id)
#  programs_commerce_offerings               | programs_commerce_offerings_program_id_fkey               | (program_id) REFERENCES programs(id)
#  programs_payment_triggers                 | programs_payment_triggers_program_id_fkey                 | (program_id) REFERENCES programs(id)
#  programs_vendor_services                  | programs_vendor_services_program_id_fkey                  | (program_id) REFERENCES programs(id)
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------
