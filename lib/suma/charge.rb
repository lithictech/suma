# frozen_string_literal: true

require "suma/postgres/model"
require "suma/admin_linked"

# Charges represent something a member was charged for,
# on or off platform. They are *not* part of the payment system;
# they are a higher-level representation of a charge,
# linked to something like a commerce order or mobility trip.
#
# Each charge may have one or more 'line items'.
# Each line item represents some part of the charge.
#
# Line items may represent on-platform funds flows (book transactions),
# like the money moved from each ledger to pay for an order
# that was paid from multiple ledgers (cash, subsidy, etc.).
#
# Line items may also represent off-platform funds flows,
# where there are no funds flows to represent. These are 'self'
# line items, which do not point to a book transaction
# (each line item can have 'self' data, or point to a book transaction).
# An example would be when we have a user account linked to
# an external vendor like Lyft, and Lyft handles all charging;
# suma is there as an intermediary but is not in the funds flow.
class Suma::Charge < Suma::Postgres::Model(:charges)
  include Suma::Postgres::HybridSearch
  include Suma::AdminLinked

  plugin :hybrid_search
  plugin :timestamps
  plugin :money_fields, :undiscounted_subtotal

  many_to_one :member, class: "Suma::Member"
  many_to_one :mobility_trip, class: "Suma::Mobility::Trip"
  many_to_one :commerce_order, class: "Suma::Commerce::Order"
  one_to_many :line_items, class: "Suma::Charge::LineItem"
  one_to_many :on_platform_line_items,
              class: "Suma::Charge::LineItem",
              conditions: Sequel[:book_transaction_id] !~ nil,
              readonly: true
  one_to_many :off_platform_line_items,
              class: "Suma::Charge::LineItem",
              conditions: Sequel[:book_transaction_id] =~ nil,
              readonly: true
  # Keep track of any synchronous funding transactions
  # that were caused due to this charge. There is NOT a direct linkage
  # in ledgering terms- this is rather modeling the user experience
  # of when a charge and funding event happen one after the other
  # (ie, paying for an order during checkout, charges a card
  # to cover the difference).
  many_to_many :associated_funding_transactions,
               class: "Suma::Payment::FundingTransaction",
               join_table: :charges_associated_funding_transactions,
               left_key: :charge_id,
               right_key: :funding_transaction_id

  def initialize(*)
    super
    self.opaque_id ||= Suma::Secureid.new_opaque_id("ch")
  end

  def discounted_subtotal
    return self.line_items.sum(Money.new(0), &:amount)
  end

  def discount_amount
    return self.undiscounted_subtotal - self.discounted_subtotal
  end

  def rel_admin_link = "/charge/#{self.id}"

  def add_off_platform_line_item(amount:, memo:, **kw)
    li = Suma::Charge::LineItem.create_self(charge: self, amount:, memo:, **kw)
    self.associations.delete(:off_platform_line_items)
    return li
  end

  def hybrid_search_fields
    return [
      :opaque_id,
      :undiscounted_subtotal,
      :undiscounted_subtotal,
      :discount_amount,
      :member,
    ]
  end

  def hybrid_search_facts
    return [
      self.commerce_order && "I am for a commerce order.",
      self.mobility_trip && "I am for a mobility trip.",
    ]
  end
end

# Table: charges
# --------------------------------------------------------------------------------------------------------------------------------------------------------
# Columns:
#  id                             | integer                  | PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
#  created_at                     | timestamp with time zone | NOT NULL DEFAULT now()
#  updated_at                     | timestamp with time zone |
#  opaque_id                      | text                     | NOT NULL
#  undiscounted_subtotal_cents    | integer                  | NOT NULL
#  undiscounted_subtotal_currency | text                     | NOT NULL
#  member_id                      | integer                  | NOT NULL
#  mobility_trip_id               | integer                  |
#  commerce_order_id              | integer                  |
#  search_content                 | text                     |
#  search_embedding               | vector(384)              |
#  search_hash                    | text                     |
# Indexes:
#  charges_pkey                          | PRIMARY KEY btree (id)
#  charges_commerce_order_id_index       | btree (commerce_order_id)
#  charges_member_id_index               | btree (member_id)
#  charges_mobility_trip_id_index        | btree (mobility_trip_id)
#  charges_search_content_tsvector_index | gin (to_tsvector('english'::regconfig, search_content))
# Foreign key constraints:
#  charges_commerce_order_id_fkey | (commerce_order_id) REFERENCES commerce_orders(id) ON DELETE SET NULL
#  charges_member_id_fkey         | (member_id) REFERENCES members(id)
#  charges_mobility_trip_id_fkey  | (mobility_trip_id) REFERENCES mobility_trips(id) ON DELETE SET NULL
# Referenced By:
#  charge_line_items                       | charge_line_items_charge_id_fkey                       | (charge_id) REFERENCES charges(id) ON DELETE CASCADE
#  charges_associated_funding_transactions | charges_associated_funding_transactions_charge_id_fkey | (charge_id) REFERENCES charges(id)
# --------------------------------------------------------------------------------------------------------------------------------------------------------
