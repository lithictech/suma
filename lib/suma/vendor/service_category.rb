# frozen_string_literal: true

require "suma/admin_linked"
require "suma/postgres/model"

class Suma::Vendor::ServiceCategory < Suma::Postgres::Model(:vendor_service_categories)
  include Suma::AdminLinked
  include TSort

  # Because a service category can point to many services and many products,
  # we don't model the backref association.
  # many_to_many :services
  # many_to_many :products

  many_to_one :parent, class: self
  one_to_many :children, class: self, key: :parent_id

  class << self
    def lookup(name)
      return Suma.cached_get("vendor_service_category_#{name}") do
        self.find_or_create_or_find(name:)
      end
    end

    def cash = self.lookup("Cash")

    def tsort_all
      roots = self.where(parent_id: nil).all
      roots.sort_by!(&:name)
      result = roots.inject([]) { |memo, r| memo.concat(r.tsort.reverse) }
      return result
    end
  end

  # TSort API: Iterate self and children to go through entire graph.
  def tsort_each_node(&)
    yield(self)
    self.children.each do |c|
      c.tsort_each_node(&)
    end
  end

  def tsort_each_child(node, &)
    return node.children.sort_by(&:name).reverse.each(&)
  end

  def hierarchy_depth
    d = 0
    it = self
    while (parent = it.parent)
      d += 1
      it = parent
    end
    return d
  end

  def hierarchy_up(&block)
    it = self
    if block
      yield(self)
    else
      arr = [self]
    end
    while (parent = it.parent)
      if block
        yield(parent)
      else
        arr << parent
      end
      it = parent
    end
    return arr unless block
  end

  def ancestor_of?(other)
    other.hierarchy_up do |h|
      return true if h === self
    end
    return false
  end

  def descendant_of?(other)
    return other.ancestor_of?(self)
  end

  def full_label
    if (prefix = self.parent&.full_label)
      return "#{prefix} - #{self.name}"
    end
    return self.name
  end

  def hierarchical_label
    depth = self.hierarchy_depth
    return self.name if depth.zero?
    chars = +"└"
    (0..(depth - 2)).each { chars << "─" } if depth > 1
    chars << " "
    chars << self.name
    return chars
  end

  def rel_admin_link = "/vendor-service-category/#{self.id}"

  def before_create
    self.slug ||= Suma.to_slug(self.name)
  end
end

# Table: vendor_service_categories
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Columns:
#  id        | integer | PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
#  name      | text    | NOT NULL
#  slug      | text    | NOT NULL
#  parent_id | integer |
# Indexes:
#  vendor_service_categories_pkey            | PRIMARY KEY btree (id)
#  vendor_service_categories_slug_key        | UNIQUE btree (slug)
#  vendor_service_categories_parent_id_index | btree (parent_id)
# Foreign key constraints:
#  vendor_service_categories_parent_id_fkey | (parent_id) REFERENCES vendor_service_categories(id)
# Referenced By:
#  payment_book_transactions                   | payment_book_transactions_associated_vendor_service_catego_fkey | (associated_vendor_service_category_id) REFERENCES vendor_service_categories(id)
#  vendor_service_categories                   | vendor_service_categories_parent_id_fkey                        | (parent_id) REFERENCES vendor_service_categories(id)
#  vendor_service_categories_commerce_products | vendor_service_categories_commerce_products_category_id_fkey    | (category_id) REFERENCES vendor_service_categories(id)
#  vendor_service_categories_payment_ledgers   | vendor_service_categories_payment_ledgers_category_id_fkey      | (category_id) REFERENCES vendor_service_categories(id)
#  vendor_service_categories_vendor_services   | vendor_service_categories_vendor_services_category_id_fkey      | (category_id) REFERENCES vendor_service_categories(id)
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
